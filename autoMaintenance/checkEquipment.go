package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

type alias struct {
	ID                string `json:"equipment_id"`
	EquipmentLocation string `json:"equipment_location"`
	EquipmentName     string `json:"equipment_name"`
	EquipmentStatus   string `json:"equipment_status"`
	LastMaintained    string `json:"last_maintained"`
}

func (e *Eqp1) Convert() alias {
	var a alias = alias(*e)
	return a
}

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

func getJson(url string, target interface{}) error {
	r, err := http.Get(url)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	return json.NewDecoder(r.Body).Decode(target)
}

func getMaintenancesForEqp(eqpID string) []Maintenance {
	url := "http://maintenance:5000/maintenance/equipment/" + eqpID
	var resp AutoGenerated
	err := getJson(url, &resp)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(len(resp.Data))
	return resp.Data
}

func getEqp(eqpID string) (Eqp1, error) {
	url := "http://equipment:4999/equipment/" + eqpID
	var resp eqpResp
	err := getJson(url, &resp)
	if err != nil {
		log.Println(err)
		log.Println("ERROR")
		return resp.Eqp1, err
	}
	return resp.Eqp1, err
}

func getBusyTechs(dateStr string) []string {
	url := "http://maintenance:5000/maintenance/busy_technicians/" + dateStr
	var resp BusyTechsResp
	err := getJson(url, &resp)
	if err != nil {
		fmt.Println(err)
	}
	return resp.Data
}

func getTechnicians() []User {
	technicians := []User{}
	url := "http://login:3001/all"
	var resp UserResp
	err := getJson(url, &resp)
	if err != nil {
		fmt.Println(err)
	}
	// for each technician, get name and append to slice
	for _, u := range resp.Users {
		if u.Role == "TECHNICIAN" {
			technicians = append(technicians, u)
		}
	}
	return technicians
}

func autoSchedule(rw http.ResponseWriter, req *http.Request) {
	if req.Method != "POST" {
		rw.WriteHeader(405)
		rw.Write([]byte("Only POST Method Allowed"))
		return
	}

	decoder := json.NewDecoder(req.Body)
	var data PostReqData
	err := decoder.Decode(&data)
	if err != nil {
		log.Panicln(err)
	}
	eqpID := data.EquipmentID
	// update equipment status
	// make post request
	e, err := getEqp(eqpID)
	if err != nil {
		rw.Header().Set("Content-Type", "application/json")
		rw.WriteHeader(404)
		resp := []byte(`{"msg": "Error getting entry, please check that equipment_id is valid"}`)
		rw.Write(resp)
		return
	}
	e.EquipmentStatus = "Down"
	a2 := e.Convert()
	jsonData, err := json.Marshal(a2)
	if err != nil {
		log.Fatal(err)
	}
	client := &http.Client{}
	putReq, err := http.NewRequest(http.MethodPut, "http://equipment:4999/equipment/"+eqpID, bytes.NewBuffer(jsonData))
	putReq.Header.Set("Content-Type", "application/json")
	if err != nil {
		log.Fatal(err)
	}
	resp, err := client.Do(putReq)
	if err != nil {
		panic(err)
	}
	fmt.Println(resp)

	maintenances := getMaintenancesForEqp(eqpID)
	fmt.Println("===============")
	fmt.Println(maintenances)
	fmt.Println("===============")
	status := false
	date := time.Now().AddDate(0, 0, 1)
	// while status is false, for current date, check if any maintenance date is same
	for !status {
		dateStr := date.Format("2006-01-02")
		for _, m := range maintenances {
			if m.ScheduleDate == dateStr {
				fmt.Println("=== DATE MATCH ===")
				status = true
				break
			}
		}
		if status {
			fmt.Println("Abort Scheduling due to earlier date existing")
			rw.Header().Set("Content-Type", "application/json")
			rw.WriteHeader(403)
			resp := []byte(`{"msg": "Equipment has a scheduled Maintenanace which is earlier than the next available auto-scheduled date."}`)
			rw.Write(resp)
			return
		}
		// invoke api to check , if code = 404

		availList := getTechnicians()
		busyTechs := getBusyTechs(dateStr)
		fmt.Println(len(availList))
		fmt.Println(busyTechs)
		// remove technician from available list
		var s []User
		for i := range availList {
			fmt.Println("looping")
			if !contains(busyTechs, availList[i].ID) {
				s = append(s, availList[i])
			}
		}

		if len(s) > 0 {
			// invoke maintenance controller to schedule maintenance
			testarr := []string{}
			e := e.Convert()
			fmt.Println("ID FOR EQP BELOW")
			fmt.Println(e)
			var st SubmitTechnician
			st.ID, st.Name, st.Phone = s[0].ID, s[0].Name, s[0].Phone
			details := map[string]interface{}{"equipment": e, "schedule_date": dateStr, "partlist": testarr, "technician": st}
			jsonData, err := json.Marshal(details)
			fmt.Println(details)
			if err != nil {
				fmt.Println(err)
			}
			resp, err := http.Post("http://maintenance_controller:8080/schedule_maintenance",
				"application/json",
				bytes.NewBuffer(jsonData))
			if err != nil {
				log.Fatal(err)
			}

			rw.Header().Set("Content-Type", "application/json")
			rw.WriteHeader(201)
			jsonResp := []byte(`{"msg": "Successfully scheduled a Maintenance for Equipment."}`)
			rw.Write(jsonResp)

			var res map[string]interface{}
			json.NewDecoder(resp.Body).Decode(&res)
			fmt.Println(res["json"])

			status = true
		} else {
			date = date.AddDate(0, 0, 1)
		}

	}

}
